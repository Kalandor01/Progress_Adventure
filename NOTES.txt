Standard structure:
    - items, weapons, armor, potions
    - speed: modified by weapons + armor
    - power = weapon + strength = damage multiplier
    - deffence = toughness + armor = damage divider
    - Entity methods fror attack, defeat...
    - entity: human(player+npc) + monster class?
    - option to not turn on the sound: no playsound import
    - sounds for: hurt, die, loot, other: from sfx gen
    - colorfull text

Items/Inventories:
    - player inventory: max items?/slots?, no use: -1?
    - equipment, item types
    - all entitys have an inventory??, all inventory items dropable?
    - Storage: inventory: items usualy have a small chance to drop, always drops on player, equipment: items usualy have a very small chance to drop, always drops on player , loot: drops a predetermined amount/type of items depending on the loot manager sttings, player doesn' t have loot, loot is inaccesable to entitys
    - item types within types: helmets, weapons, plus all items category?
    - Tile: type: enum, content: enum?: function that gets called when you step on that tile, data: dict
    - items: big dict of dicts, where key is item enum and dict has the item's actions(call function), with data: {SPEAR: {"use": (throw, [5, "ouch", 69.42]), "drop": (drop, None)}, CURSED_SWORD: {"use": (swing, [8]), "use2": (stab, [10, 2])}}
    - if key is missing from item action list, default is used: no "drop": "drop": (drop, None)
    - maybe used for Tile content as well

Important Entiies:
    - human(monster type?): monster and nps
    - important: can show up more
    - named monsters (important):
        - npcs
        - monsters:
            - it kills you
            - you escape

Speech/sound:
    - sound/music playing function
    - humans talk: words
    - monsters talk: letters
    - different voices(sounds) for different monsters and NPCs?
    - monsters use non english letters?

Teams:
    - multiple teams in fights
    - team swtch chance: base * (1+level_difrence): can be negative
    - team with monters can be permanent between saves
    - team -1: passive

World:
    - map is mostly empty, and has points of intetest
    - after saving only the last last ~10 chunks stay in memory?
    - pass tile.self into content function

Testing:
    - make character test object that is swapable for the real character(writes out options and lets you chose)
    - test world object stuff

Other ideas:
    - acuracy stat?
    - optional enemy phases (if phase[x] = true: phase(name[x]))
    - escape from fight(when low)
    - more monster modifications like rare: speedy, slugish, jacked, old, young
    - monster abilities: jump, heavy, no move: from enum, each type has it's own ability on spawn
    - connected universe between saves?
    - seed in display???
    - delete/override line with ANSI escape characters
    - official menu for backup loading?
    - class specific store/load Entity function
    - object init returns false if there was an error loading data
    - key combinations?: crtl+s = save
    - PA: merge save and load: synronize variables
    - split save/load into function, and try each one individualy: if exeption: call create function for it
    - for enums in save file: if on load enum doesn't exist... default?

IMPORTANT:
    - rework main menu logic!!!!!!!
    - getch() that I can stop from other thread
    - PA GUI